#!/bin/bash -e

source ${SCRIPT_DIR}/commands

# 00-prerun.sh ========================

IMAGE_FILENAME="${IMAGE_NAME}-$(date +%Y-%m-%d)"
[ "${USE_QEMU}" = "1" ] && IMAGE_FILENAME="${IMAGE_FILENAME}-qemu"
ZIP_FILENAME="image_${IMAGE_FILENAME}"

IMAGE_FILE="${WORK_DIR}/${IMAGE_FILENAME}${IMAGE_SUFFIX}.img"

if [ -f "$IMAGE_FILE" ]; then
    umount-pi-img "${IMAGE_FILE}" || true
fi

rm -f "${IMAGE_FILE}"

rm -rf "${ROOTFS_DIR}"
mkdir -p "${ROOTFS_DIR}"

BOOT_SIZE="$((256 * 1024 * 1024))"
ROOT_SIZE=$(du --apparent-size -s "${EXPORT_ROOTFS_DIR}" --exclude var/cache/apt/archives --exclude boot --block-size=1 | cut -f 1)

# All partition sizes and starts will be aligned to this size
ALIGN="$((4 * 1024 * 1024))"
# Add this much space to the calculated file size. This allows for
# some overhead (since actual space usage is usually rounded up to the
# filesystem block size) and gives some free space on the resulting
# image.
ROOT_MARGIN=$((800*1024*1024))

BOOT_PART_START=$((ALIGN))
BOOT_PART_SIZE=$(((BOOT_SIZE + ALIGN - 1) / ALIGN * ALIGN))
ROOT_PART_START=$((BOOT_PART_START + BOOT_PART_SIZE))
ROOT_PART_SIZE=$(((ROOT_SIZE + ROOT_MARGIN + ALIGN  - 1) / ALIGN * ALIGN))
IMAGE_SIZE=$((BOOT_PART_START + BOOT_PART_SIZE + ROOT_PART_SIZE))

[[ "$(df "${IMAGE_FILE}" --output=fstype | tail -1)" == "btrfs" ]] && chattr +C "${IMAGE_FILE}"
truncate -s "${IMAGE_SIZE}" "${IMAGE_FILE}"

parted --script "${IMAGE_FILE}" mklabel msdos
parted --script "${IMAGE_FILE}" unit B mkpart primary fat32 "${BOOT_PART_START}" "$((BOOT_PART_START + BOOT_PART_SIZE - 1))"
parted --script "${IMAGE_FILE}" unit B mkpart primary ext4 "${ROOT_PART_START}" "$((ROOT_PART_START + ROOT_PART_SIZE - 1))"

LOOP_DEV=$(losetup --show -Pf "${IMAGE_FILE}")
BOOT_DEV=${LOOP_DEV}p1
ROOT_DEV=${LOOP_DEV}p2

ROOT_FEATURES="^huge_file"
for FEATURE in metadata_csum 64bit; do
	if grep -q "$FEATURE" /etc/mke2fs.conf; then
	    ROOT_FEATURES="^$FEATURE,$ROOT_FEATURES"
	fi
done
mkdosfs -n boot -F 32 -v "$BOOT_DEV" > /dev/null
mkfs.ext4 -L rootfs -O "$ROOT_FEATURES" "$ROOT_DEV" > /dev/null

mount -v "$ROOT_DEV" "${ROOTFS_DIR}" -t ext4
mkdir -p "${ROOTFS_DIR}/boot"
mount -v "$BOOT_DEV" "${ROOTFS_DIR}/boot" -t vfat

rsync -aHAXx --exclude /var/cache/apt/archives --exclude /boot "${EXPORT_ROOTFS_DIR}/" "${ROOTFS_DIR}/"
rsync -rtx "${EXPORT_ROOTFS_DIR}/boot/" "${ROOTFS_DIR}/boot/"

# 01-allow-rerun.sh ========================

if [ ! -x "${ROOTFS_DIR}/usr/bin/qemu-arm-static" ]; then
	cp /usr/bin/qemu-arm-static "${ROOTFS_DIR}/usr/bin/"
fi

# 02-set-partuuid.sh ========================

${BASE_DIR}/scripts/genfstab -t PARTUUID "${ROOTFS_DIR}" | tee "${ROOTFS_DIR}/etc/fstab"
PARTUUID=$(lsblk -rno PARTUUID $(findmnt -no SOURCE "${ROOTFS_DIR}"))

sed -i "s/ROOTDEV/PARTUUID=${PARTUUID}/" "${ROOTFS_DIR}/boot/cmdline.txt"

# 03-finalize.sh ========================

IMAGE_FILE="${WORK_DIR}/${IMAGE_FILENAME}${IMAGE_SUFFIX}.img"
INFO_FILE="${WORK_DIR}/${IMAGE_FILENAME}${IMAGE_SUFFIX}.info"

ON_CHROOT << EOF
if [ -x /etc/init.d/fake-hwclock ]; then
	/etc/init.d/fake-hwclock stop
fi
if hash hardlink 2>/dev/null; then
	hardlink -t /usr/share/doc
fi
EOF

if [ -d "${ROOTFS_DIR}/home/${FIRST_USER_NAME}/.config" ]; then
	chmod 700 "${ROOTFS_DIR}/home/${FIRST_USER_NAME}/.config"
fi

rm -f "${ROOTFS_DIR}/etc/apt/apt.conf.d/51cache"
rm -f "${ROOTFS_DIR}/usr/bin/qemu-arm-static"

rm -f "${ROOTFS_DIR}/etc/network/interfaces.dpkg-old"

rm -f "${ROOTFS_DIR}/etc/apt/sources.list~"
rm -f "${ROOTFS_DIR}/etc/apt/trusted.gpg~"

rm -f "${ROOTFS_DIR}/etc/passwd-"
rm -f "${ROOTFS_DIR}/etc/group-"
rm -f "${ROOTFS_DIR}/etc/shadow-"
rm -f "${ROOTFS_DIR}/etc/gshadow-"
rm -f "${ROOTFS_DIR}/etc/subuid-"
rm -f "${ROOTFS_DIR}/etc/subgid-"

rm -f "${ROOTFS_DIR}"/var/cache/debconf/*-old
rm -f "${ROOTFS_DIR}"/var/lib/dpkg/*-old

rm -f "${ROOTFS_DIR}"/usr/share/icons/*/icon-theme.cache

rm -f "${ROOTFS_DIR}/var/lib/dbus/machine-id"

true > "${ROOTFS_DIR}/etc/machine-id"

ln -nsf /proc/mounts "${ROOTFS_DIR}/etc/mtab"

find "${ROOTFS_DIR}/var/log/" -type f -exec cp /dev/null {} \;

rm -f "${ROOTFS_DIR}/root/.vnc/private.key"
rm -f "${ROOTFS_DIR}/etc/vnc/updateid"

update_issue "$(basename "${EXPORT_DIR}")"
install -m 644 "${ROOTFS_DIR}/etc/img-issue" "${ROOTFS_DIR}/boot/issue.txt"

cp "$ROOTFS_DIR/etc/img-issue" "$INFO_FILE"


{
	if [ -f "$ROOTFS_DIR/usr/share/doc/raspberrypi-kernel/changelog.Debian.gz" ]; then
		firmware=$(zgrep "firmware as of" \
			"$ROOTFS_DIR/usr/share/doc/raspberrypi-kernel/changelog.Debian.gz" | \
			head -n1 | sed  -n 's|.* \([^ ]*\)$|\1|p')
		printf "\nFirmware: https://github.com/raspberrypi/firmware/tree/%s\n" "$firmware"

		kernel="$(curl -s -L "https://github.com/raspberrypi/firmware/raw/$firmware/extra/git_hash")"
		printf "Kernel: https://github.com/raspberrypi/linux/tree/%s\n" "$kernel"

		uname="$(curl -s -L "https://github.com/raspberrypi/firmware/raw/$firmware/extra/uname_string7")"
		printf "Uname string: %s\n" "$uname"
	fi

	printf "\nPackages:\n"
	ON_CHROOT <<<"dpkg -l"
} >> "$INFO_FILE"

ROOT_DEV=$(findmnt -no SOURCE "${ROOTFS_DIR}")

umount -R "${ROOTFS_DIR}"
zerofree "${ROOT_DEV}"

umount-pi-img "${IMAGE_FILE}"

mkdir -p "${DEPLOY_DIR}"

rm -f "${DEPLOY_DIR}/${ZIP_FILENAME}${IMAGE_SUFFIX}.zip"
rm -f "${DEPLOY_DIR}/${IMAGE_FILENAME}${IMAGE_SUFFIX}.img"

if [ "${DEPLOY_ZIP}" == "1" ]; then
	pushd "${WORK_DIR}" > /dev/null
	zip "${DEPLOY_DIR}/${ZIP_FILENAME}${IMAGE_SUFFIX}.zip" \
		"$(basename "${IMAGE_FILE}")"
	rm "$IMAGE_FILE"
	popd > /dev/null
else
	mv "$IMAGE_FILE" "$DEPLOY_DIR"
fi

mv "$INFO_FILE" "$DEPLOY_DIR"
