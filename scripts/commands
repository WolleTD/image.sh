FROM() {
    local FROM_IMAGE=$1
    local FROM_IMAGE_DIR="${CACHE_DIR}/${FROM_IMAGE}"

    echo "FROM $@"

    if [[ "${FROM_IMAGE}" == "scratch" ]]; then
        mkdir -p "${ROOTFS_DIR}"
        echo "FROM done."
        return 0
    fi

    if [ ! -f "${FROM_IMAGE_DIR}/image.sh.cache" ]; then
        error "${FROM_IMAGE} not in cache!"
        #pushd ${BASE_DIR} >/dev/null
        #export IMAGESH_SUB=1
        #./image.sh ${FROM_IMAGE}
        #popd >/dev/null
    fi

    # TODO: Here be a storage engine, merge rootfs and image dir, state tracking
    mkdir -p "${ROOTFS_DIR}"
    rsync -auHAXx --exclude var/cache/apt/archives "${FROM_IMAGE_DIR}/rootfs/" "${ROOTFS_DIR}/"
    echo "FROM done."
}
commands["FROM"]="FROM"

COPY() {
    # Expand argument
    set -- $@
    CHOWN_ARG="--chown=root:root"
    if [[ "$1" =~ "--chown=.*" ]]; then
        CHOWN_ARG=$1
        shift
    fi
    local SOURCE=$1
    local DEST=$2
    echo "COPY $@"
    if [ -d "${SOURCE}" ]; then
        SOURCE="${SOURCE%/}/"
        TESTDIR="${ROOTFS_DIR}${DEST}"
    elif [ -f "${SOURCE}" ]; then
        TESTDIR="${ROOTFS_DIR}${DEST%/*}"
    else
        echo "ERROR: ${SOURCE} is neither a file nor a directory!" >&2
        exit 1
    fi
    mkdir -p "${TESTDIR}"

    rsync -aH "${CHOWN_ARG}" "${SOURCE}" "${ROOTFS_DIR}${DEST}"
    echo "COPY done."
}
commands["COPY"]="COPY"
commands["ADD"]="COPY"

ENV() {
    # Expand argument - source the existing enviroment
    # in a subshell to keep the outer enviroment clean
    # and use envsubst to replace variables without eval
    echo "ENV $@"
    ARGS="$([ -f "${IMAGE_DIR}/image.sh.env" ] && \
        source <(awk '{print "export",$0}' "${IMAGE_DIR}/image.sh.env");  \
        echo "$*" | envsubst | awk 'BEGIN{FPAT="([^ ]+)|([^ ]+=\"[^\"]+\")"}
        {for(i=1;i<=NF;i++){gsub(/"/,"",$i);print $i}}')"
    for arg in "${ARGS}"; do
        echo "${arg}" >> "${IMAGE_DIR}/image.sh.env"
    done
}
commands["ENV"]="ENV"
commands["ARG"]="ENV"

RUN() {
    echo "RUN $@"
    ENVIRON=()
    [ -f "${IMAGE_DIR}/image.sh.env" ] && \
        while read -r line
    do
        ENVIRON+=( -E "${line}" )
    done <"${IMAGE_DIR}/image.sh.env"

    if ! systemd-nspawn                                  \
        --bind /etc/resolv.conf:/etc/resolv.conf    \
        "${ENVIRON[@]}" -M $(tr / - <<<${CONTEXT})          \
        -PD "${ROOTFS_DIR}" bash -Eeuo pipefail -c "$@"
    then
        error "Command RUN $@ failed!"
    fi
    echo "RUN done."
}
commands["RUN"]="RUN"
